// Code generated by counterfeiter. DO NOT EDIT.
package openstackfakes

import (
	"sync"

	"github.com/gophercloud/gophercloud/openstack/blockstorage/v2/volumes"
	"github.com/gophercloud/gophercloud/pagination"
)

type FakePagesAndVolumesExtractor struct {
	PageToVolumesStub        func(pagination.Page) ([]volumes.Volume, error)
	pageToVolumesMutex       sync.RWMutex
	pageToVolumesArgsForCall []struct {
		arg1 pagination.Page
	}
	pageToVolumesReturns struct {
		result1 []volumes.Volume
		result2 error
	}
	pageToVolumesReturnsOnCall map[int]struct {
		result1 []volumes.Volume
		result2 error
	}
	PagerToPageStub        func(pagination.Pager) (pagination.Page, error)
	pagerToPageMutex       sync.RWMutex
	pagerToPageArgsForCall []struct {
		arg1 pagination.Pager
	}
	pagerToPageReturns struct {
		result1 pagination.Page
		result2 error
	}
	pagerToPageReturnsOnCall map[int]struct {
		result1 pagination.Page
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePagesAndVolumesExtractor) PageToVolumes(arg1 pagination.Page) ([]volumes.Volume, error) {
	fake.pageToVolumesMutex.Lock()
	ret, specificReturn := fake.pageToVolumesReturnsOnCall[len(fake.pageToVolumesArgsForCall)]
	fake.pageToVolumesArgsForCall = append(fake.pageToVolumesArgsForCall, struct {
		arg1 pagination.Page
	}{arg1})
	fake.recordInvocation("PageToVolumes", []interface{}{arg1})
	fake.pageToVolumesMutex.Unlock()
	if fake.PageToVolumesStub != nil {
		return fake.PageToVolumesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pageToVolumesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePagesAndVolumesExtractor) PageToVolumesCallCount() int {
	fake.pageToVolumesMutex.RLock()
	defer fake.pageToVolumesMutex.RUnlock()
	return len(fake.pageToVolumesArgsForCall)
}

func (fake *FakePagesAndVolumesExtractor) PageToVolumesCalls(stub func(pagination.Page) ([]volumes.Volume, error)) {
	fake.pageToVolumesMutex.Lock()
	defer fake.pageToVolumesMutex.Unlock()
	fake.PageToVolumesStub = stub
}

func (fake *FakePagesAndVolumesExtractor) PageToVolumesArgsForCall(i int) pagination.Page {
	fake.pageToVolumesMutex.RLock()
	defer fake.pageToVolumesMutex.RUnlock()
	argsForCall := fake.pageToVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePagesAndVolumesExtractor) PageToVolumesReturns(result1 []volumes.Volume, result2 error) {
	fake.pageToVolumesMutex.Lock()
	defer fake.pageToVolumesMutex.Unlock()
	fake.PageToVolumesStub = nil
	fake.pageToVolumesReturns = struct {
		result1 []volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakePagesAndVolumesExtractor) PageToVolumesReturnsOnCall(i int, result1 []volumes.Volume, result2 error) {
	fake.pageToVolumesMutex.Lock()
	defer fake.pageToVolumesMutex.Unlock()
	fake.PageToVolumesStub = nil
	if fake.pageToVolumesReturnsOnCall == nil {
		fake.pageToVolumesReturnsOnCall = make(map[int]struct {
			result1 []volumes.Volume
			result2 error
		})
	}
	fake.pageToVolumesReturnsOnCall[i] = struct {
		result1 []volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakePagesAndVolumesExtractor) PagerToPage(arg1 pagination.Pager) (pagination.Page, error) {
	fake.pagerToPageMutex.Lock()
	ret, specificReturn := fake.pagerToPageReturnsOnCall[len(fake.pagerToPageArgsForCall)]
	fake.pagerToPageArgsForCall = append(fake.pagerToPageArgsForCall, struct {
		arg1 pagination.Pager
	}{arg1})
	fake.recordInvocation("PagerToPage", []interface{}{arg1})
	fake.pagerToPageMutex.Unlock()
	if fake.PagerToPageStub != nil {
		return fake.PagerToPageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pagerToPageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePagesAndVolumesExtractor) PagerToPageCallCount() int {
	fake.pagerToPageMutex.RLock()
	defer fake.pagerToPageMutex.RUnlock()
	return len(fake.pagerToPageArgsForCall)
}

func (fake *FakePagesAndVolumesExtractor) PagerToPageCalls(stub func(pagination.Pager) (pagination.Page, error)) {
	fake.pagerToPageMutex.Lock()
	defer fake.pagerToPageMutex.Unlock()
	fake.PagerToPageStub = stub
}

func (fake *FakePagesAndVolumesExtractor) PagerToPageArgsForCall(i int) pagination.Pager {
	fake.pagerToPageMutex.RLock()
	defer fake.pagerToPageMutex.RUnlock()
	argsForCall := fake.pagerToPageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePagesAndVolumesExtractor) PagerToPageReturns(result1 pagination.Page, result2 error) {
	fake.pagerToPageMutex.Lock()
	defer fake.pagerToPageMutex.Unlock()
	fake.PagerToPageStub = nil
	fake.pagerToPageReturns = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakePagesAndVolumesExtractor) PagerToPageReturnsOnCall(i int, result1 pagination.Page, result2 error) {
	fake.pagerToPageMutex.Lock()
	defer fake.pagerToPageMutex.Unlock()
	fake.PagerToPageStub = nil
	if fake.pagerToPageReturnsOnCall == nil {
		fake.pagerToPageReturnsOnCall = make(map[int]struct {
			result1 pagination.Page
			result2 error
		})
	}
	fake.pagerToPageReturnsOnCall[i] = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakePagesAndVolumesExtractor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pageToVolumesMutex.RLock()
	defer fake.pageToVolumesMutex.RUnlock()
	fake.pagerToPageMutex.RLock()
	defer fake.pagerToPageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePagesAndVolumesExtractor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
