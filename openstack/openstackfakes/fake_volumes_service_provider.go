// Code generated by counterfeiter. DO NOT EDIT.
package openstackfakes

import (
	"sync"

	"github.com/genevieve/leftovers/openstack"
)

type FakeVolumesServiceProvider struct {
	GetVolumesDeleterStub        func() openstack.VolumesDeleter
	getVolumesDeleterMutex       sync.RWMutex
	getVolumesDeleterArgsForCall []struct {
	}
	getVolumesDeleterReturns struct {
		result1 openstack.VolumesDeleter
	}
	getVolumesDeleterReturnsOnCall map[int]struct {
		result1 openstack.VolumesDeleter
	}
	GetVolumesListerStub        func() openstack.VolumesLister
	getVolumesListerMutex       sync.RWMutex
	getVolumesListerArgsForCall []struct {
	}
	getVolumesListerReturns struct {
		result1 openstack.VolumesLister
	}
	getVolumesListerReturnsOnCall map[int]struct {
		result1 openstack.VolumesLister
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumesServiceProvider) GetVolumesDeleter() openstack.VolumesDeleter {
	fake.getVolumesDeleterMutex.Lock()
	ret, specificReturn := fake.getVolumesDeleterReturnsOnCall[len(fake.getVolumesDeleterArgsForCall)]
	fake.getVolumesDeleterArgsForCall = append(fake.getVolumesDeleterArgsForCall, struct {
	}{})
	fake.recordInvocation("GetVolumesDeleter", []interface{}{})
	fake.getVolumesDeleterMutex.Unlock()
	if fake.GetVolumesDeleterStub != nil {
		return fake.GetVolumesDeleterStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getVolumesDeleterReturns
	return fakeReturns.result1
}

func (fake *FakeVolumesServiceProvider) GetVolumesDeleterCallCount() int {
	fake.getVolumesDeleterMutex.RLock()
	defer fake.getVolumesDeleterMutex.RUnlock()
	return len(fake.getVolumesDeleterArgsForCall)
}

func (fake *FakeVolumesServiceProvider) GetVolumesDeleterCalls(stub func() openstack.VolumesDeleter) {
	fake.getVolumesDeleterMutex.Lock()
	defer fake.getVolumesDeleterMutex.Unlock()
	fake.GetVolumesDeleterStub = stub
}

func (fake *FakeVolumesServiceProvider) GetVolumesDeleterReturns(result1 openstack.VolumesDeleter) {
	fake.getVolumesDeleterMutex.Lock()
	defer fake.getVolumesDeleterMutex.Unlock()
	fake.GetVolumesDeleterStub = nil
	fake.getVolumesDeleterReturns = struct {
		result1 openstack.VolumesDeleter
	}{result1}
}

func (fake *FakeVolumesServiceProvider) GetVolumesDeleterReturnsOnCall(i int, result1 openstack.VolumesDeleter) {
	fake.getVolumesDeleterMutex.Lock()
	defer fake.getVolumesDeleterMutex.Unlock()
	fake.GetVolumesDeleterStub = nil
	if fake.getVolumesDeleterReturnsOnCall == nil {
		fake.getVolumesDeleterReturnsOnCall = make(map[int]struct {
			result1 openstack.VolumesDeleter
		})
	}
	fake.getVolumesDeleterReturnsOnCall[i] = struct {
		result1 openstack.VolumesDeleter
	}{result1}
}

func (fake *FakeVolumesServiceProvider) GetVolumesLister() openstack.VolumesLister {
	fake.getVolumesListerMutex.Lock()
	ret, specificReturn := fake.getVolumesListerReturnsOnCall[len(fake.getVolumesListerArgsForCall)]
	fake.getVolumesListerArgsForCall = append(fake.getVolumesListerArgsForCall, struct {
	}{})
	fake.recordInvocation("GetVolumesLister", []interface{}{})
	fake.getVolumesListerMutex.Unlock()
	if fake.GetVolumesListerStub != nil {
		return fake.GetVolumesListerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getVolumesListerReturns
	return fakeReturns.result1
}

func (fake *FakeVolumesServiceProvider) GetVolumesListerCallCount() int {
	fake.getVolumesListerMutex.RLock()
	defer fake.getVolumesListerMutex.RUnlock()
	return len(fake.getVolumesListerArgsForCall)
}

func (fake *FakeVolumesServiceProvider) GetVolumesListerCalls(stub func() openstack.VolumesLister) {
	fake.getVolumesListerMutex.Lock()
	defer fake.getVolumesListerMutex.Unlock()
	fake.GetVolumesListerStub = stub
}

func (fake *FakeVolumesServiceProvider) GetVolumesListerReturns(result1 openstack.VolumesLister) {
	fake.getVolumesListerMutex.Lock()
	defer fake.getVolumesListerMutex.Unlock()
	fake.GetVolumesListerStub = nil
	fake.getVolumesListerReturns = struct {
		result1 openstack.VolumesLister
	}{result1}
}

func (fake *FakeVolumesServiceProvider) GetVolumesListerReturnsOnCall(i int, result1 openstack.VolumesLister) {
	fake.getVolumesListerMutex.Lock()
	defer fake.getVolumesListerMutex.Unlock()
	fake.GetVolumesListerStub = nil
	if fake.getVolumesListerReturnsOnCall == nil {
		fake.getVolumesListerReturnsOnCall = make(map[int]struct {
			result1 openstack.VolumesLister
		})
	}
	fake.getVolumesListerReturnsOnCall[i] = struct {
		result1 openstack.VolumesLister
	}{result1}
}

func (fake *FakeVolumesServiceProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVolumesDeleterMutex.RLock()
	defer fake.getVolumesDeleterMutex.RUnlock()
	fake.getVolumesListerMutex.RLock()
	defer fake.getVolumesListerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolumesServiceProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ openstack.VolumesServiceProvider = new(FakeVolumesServiceProvider)
