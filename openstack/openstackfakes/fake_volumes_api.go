// Code generated by counterfeiter. DO NOT EDIT.
package openstackfakes

import (
	"sync"

	"github.com/gophercloud/gophercloud"
	"github.com/gophercloud/gophercloud/openstack/blockstorage/v3/volumes"
	"github.com/gophercloud/gophercloud/pagination"
)

type FakeVolumesAPI struct {
	DeleteVolumeStub        func(*gophercloud.ServiceClient, string, volumes.DeleteOpts) error
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		arg1 *gophercloud.ServiceClient
		arg2 string
		arg3 volumes.DeleteOpts
	}
	deleteVolumeReturns struct {
		result1 error
	}
	deleteVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	GetVolumesPagerStub        func(*gophercloud.ServiceClient, volumes.ListOpts) pagination.Pager
	getVolumesPagerMutex       sync.RWMutex
	getVolumesPagerArgsForCall []struct {
		arg1 *gophercloud.ServiceClient
		arg2 volumes.ListOpts
	}
	getVolumesPagerReturns struct {
		result1 pagination.Pager
	}
	getVolumesPagerReturnsOnCall map[int]struct {
		result1 pagination.Pager
	}
	PageToVolumesStub        func(pagination.Page) ([]volumes.Volume, error)
	pageToVolumesMutex       sync.RWMutex
	pageToVolumesArgsForCall []struct {
		arg1 pagination.Page
	}
	pageToVolumesReturns struct {
		result1 []volumes.Volume
		result2 error
	}
	pageToVolumesReturnsOnCall map[int]struct {
		result1 []volumes.Volume
		result2 error
	}
	PagerToPageStub        func(pagination.Pager) (pagination.Page, error)
	pagerToPageMutex       sync.RWMutex
	pagerToPageArgsForCall []struct {
		arg1 pagination.Pager
	}
	pagerToPageReturns struct {
		result1 pagination.Page
		result2 error
	}
	pagerToPageReturnsOnCall map[int]struct {
		result1 pagination.Page
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumesAPI) DeleteVolume(arg1 *gophercloud.ServiceClient, arg2 string, arg3 volumes.DeleteOpts) error {
	fake.deleteVolumeMutex.Lock()
	ret, specificReturn := fake.deleteVolumeReturnsOnCall[len(fake.deleteVolumeArgsForCall)]
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		arg1 *gophercloud.ServiceClient
		arg2 string
		arg3 volumes.DeleteOpts
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVolume", []interface{}{arg1, arg2, arg3})
	fake.deleteVolumeMutex.Unlock()
	if fake.DeleteVolumeStub != nil {
		return fake.DeleteVolumeStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteVolumeReturns
	return fakeReturns.result1
}

func (fake *FakeVolumesAPI) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeVolumesAPI) DeleteVolumeCalls(stub func(*gophercloud.ServiceClient, string, volumes.DeleteOpts) error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = stub
}

func (fake *FakeVolumesAPI) DeleteVolumeArgsForCall(i int) (*gophercloud.ServiceClient, string, volumes.DeleteOpts) {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	argsForCall := fake.deleteVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVolumesAPI) DeleteVolumeReturns(result1 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumesAPI) DeleteVolumeReturnsOnCall(i int, result1 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	if fake.deleteVolumeReturnsOnCall == nil {
		fake.deleteVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVolumesAPI) GetVolumesPager(arg1 *gophercloud.ServiceClient, arg2 volumes.ListOpts) pagination.Pager {
	fake.getVolumesPagerMutex.Lock()
	ret, specificReturn := fake.getVolumesPagerReturnsOnCall[len(fake.getVolumesPagerArgsForCall)]
	fake.getVolumesPagerArgsForCall = append(fake.getVolumesPagerArgsForCall, struct {
		arg1 *gophercloud.ServiceClient
		arg2 volumes.ListOpts
	}{arg1, arg2})
	fake.recordInvocation("GetVolumesPager", []interface{}{arg1, arg2})
	fake.getVolumesPagerMutex.Unlock()
	if fake.GetVolumesPagerStub != nil {
		return fake.GetVolumesPagerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getVolumesPagerReturns
	return fakeReturns.result1
}

func (fake *FakeVolumesAPI) GetVolumesPagerCallCount() int {
	fake.getVolumesPagerMutex.RLock()
	defer fake.getVolumesPagerMutex.RUnlock()
	return len(fake.getVolumesPagerArgsForCall)
}

func (fake *FakeVolumesAPI) GetVolumesPagerCalls(stub func(*gophercloud.ServiceClient, volumes.ListOpts) pagination.Pager) {
	fake.getVolumesPagerMutex.Lock()
	defer fake.getVolumesPagerMutex.Unlock()
	fake.GetVolumesPagerStub = stub
}

func (fake *FakeVolumesAPI) GetVolumesPagerArgsForCall(i int) (*gophercloud.ServiceClient, volumes.ListOpts) {
	fake.getVolumesPagerMutex.RLock()
	defer fake.getVolumesPagerMutex.RUnlock()
	argsForCall := fake.getVolumesPagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVolumesAPI) GetVolumesPagerReturns(result1 pagination.Pager) {
	fake.getVolumesPagerMutex.Lock()
	defer fake.getVolumesPagerMutex.Unlock()
	fake.GetVolumesPagerStub = nil
	fake.getVolumesPagerReturns = struct {
		result1 pagination.Pager
	}{result1}
}

func (fake *FakeVolumesAPI) GetVolumesPagerReturnsOnCall(i int, result1 pagination.Pager) {
	fake.getVolumesPagerMutex.Lock()
	defer fake.getVolumesPagerMutex.Unlock()
	fake.GetVolumesPagerStub = nil
	if fake.getVolumesPagerReturnsOnCall == nil {
		fake.getVolumesPagerReturnsOnCall = make(map[int]struct {
			result1 pagination.Pager
		})
	}
	fake.getVolumesPagerReturnsOnCall[i] = struct {
		result1 pagination.Pager
	}{result1}
}

func (fake *FakeVolumesAPI) PageToVolumes(arg1 pagination.Page) ([]volumes.Volume, error) {
	fake.pageToVolumesMutex.Lock()
	ret, specificReturn := fake.pageToVolumesReturnsOnCall[len(fake.pageToVolumesArgsForCall)]
	fake.pageToVolumesArgsForCall = append(fake.pageToVolumesArgsForCall, struct {
		arg1 pagination.Page
	}{arg1})
	fake.recordInvocation("PageToVolumes", []interface{}{arg1})
	fake.pageToVolumesMutex.Unlock()
	if fake.PageToVolumesStub != nil {
		return fake.PageToVolumesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pageToVolumesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumesAPI) PageToVolumesCallCount() int {
	fake.pageToVolumesMutex.RLock()
	defer fake.pageToVolumesMutex.RUnlock()
	return len(fake.pageToVolumesArgsForCall)
}

func (fake *FakeVolumesAPI) PageToVolumesCalls(stub func(pagination.Page) ([]volumes.Volume, error)) {
	fake.pageToVolumesMutex.Lock()
	defer fake.pageToVolumesMutex.Unlock()
	fake.PageToVolumesStub = stub
}

func (fake *FakeVolumesAPI) PageToVolumesArgsForCall(i int) pagination.Page {
	fake.pageToVolumesMutex.RLock()
	defer fake.pageToVolumesMutex.RUnlock()
	argsForCall := fake.pageToVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVolumesAPI) PageToVolumesReturns(result1 []volumes.Volume, result2 error) {
	fake.pageToVolumesMutex.Lock()
	defer fake.pageToVolumesMutex.Unlock()
	fake.PageToVolumesStub = nil
	fake.pageToVolumesReturns = struct {
		result1 []volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumesAPI) PageToVolumesReturnsOnCall(i int, result1 []volumes.Volume, result2 error) {
	fake.pageToVolumesMutex.Lock()
	defer fake.pageToVolumesMutex.Unlock()
	fake.PageToVolumesStub = nil
	if fake.pageToVolumesReturnsOnCall == nil {
		fake.pageToVolumesReturnsOnCall = make(map[int]struct {
			result1 []volumes.Volume
			result2 error
		})
	}
	fake.pageToVolumesReturnsOnCall[i] = struct {
		result1 []volumes.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumesAPI) PagerToPage(arg1 pagination.Pager) (pagination.Page, error) {
	fake.pagerToPageMutex.Lock()
	ret, specificReturn := fake.pagerToPageReturnsOnCall[len(fake.pagerToPageArgsForCall)]
	fake.pagerToPageArgsForCall = append(fake.pagerToPageArgsForCall, struct {
		arg1 pagination.Pager
	}{arg1})
	fake.recordInvocation("PagerToPage", []interface{}{arg1})
	fake.pagerToPageMutex.Unlock()
	if fake.PagerToPageStub != nil {
		return fake.PagerToPageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pagerToPageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVolumesAPI) PagerToPageCallCount() int {
	fake.pagerToPageMutex.RLock()
	defer fake.pagerToPageMutex.RUnlock()
	return len(fake.pagerToPageArgsForCall)
}

func (fake *FakeVolumesAPI) PagerToPageCalls(stub func(pagination.Pager) (pagination.Page, error)) {
	fake.pagerToPageMutex.Lock()
	defer fake.pagerToPageMutex.Unlock()
	fake.PagerToPageStub = stub
}

func (fake *FakeVolumesAPI) PagerToPageArgsForCall(i int) pagination.Pager {
	fake.pagerToPageMutex.RLock()
	defer fake.pagerToPageMutex.RUnlock()
	argsForCall := fake.pagerToPageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVolumesAPI) PagerToPageReturns(result1 pagination.Page, result2 error) {
	fake.pagerToPageMutex.Lock()
	defer fake.pagerToPageMutex.Unlock()
	fake.PagerToPageStub = nil
	fake.pagerToPageReturns = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumesAPI) PagerToPageReturnsOnCall(i int, result1 pagination.Page, result2 error) {
	fake.pagerToPageMutex.Lock()
	defer fake.pagerToPageMutex.Unlock()
	fake.PagerToPageStub = nil
	if fake.pagerToPageReturnsOnCall == nil {
		fake.pagerToPageReturnsOnCall = make(map[int]struct {
			result1 pagination.Page
			result2 error
		})
	}
	fake.pagerToPageReturnsOnCall[i] = struct {
		result1 pagination.Page
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumesAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	fake.getVolumesPagerMutex.RLock()
	defer fake.getVolumesPagerMutex.RUnlock()
	fake.pageToVolumesMutex.RLock()
	defer fake.pageToVolumesMutex.RUnlock()
	fake.pagerToPageMutex.RLock()
	defer fake.pagerToPageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVolumesAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
