// Code generated by counterfeiter. DO NOT EDIT.
package openstackfakes

import (
	"sync"
)

type FakeLogger struct {
	NoConfirmStub        func()
	noConfirmMutex       sync.RWMutex
	noConfirmArgsForCall []struct {
	}
	PrintfStub        func(string, ...interface{})
	printfMutex       sync.RWMutex
	printfArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	PrintlnStub        func(string)
	printlnMutex       sync.RWMutex
	printlnArgsForCall []struct {
		arg1 string
	}
	PromptWithDetailsStub        func(string, string) bool
	promptWithDetailsMutex       sync.RWMutex
	promptWithDetailsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	promptWithDetailsReturns struct {
		result1 bool
	}
	promptWithDetailsReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogger) NoConfirm() {
	fake.noConfirmMutex.Lock()
	fake.noConfirmArgsForCall = append(fake.noConfirmArgsForCall, struct {
	}{})
	fake.recordInvocation("NoConfirm", []interface{}{})
	fake.noConfirmMutex.Unlock()
	if fake.NoConfirmStub != nil {
		fake.NoConfirmStub()
	}
}

func (fake *FakeLogger) NoConfirmCallCount() int {
	fake.noConfirmMutex.RLock()
	defer fake.noConfirmMutex.RUnlock()
	return len(fake.noConfirmArgsForCall)
}

func (fake *FakeLogger) NoConfirmCalls(stub func()) {
	fake.noConfirmMutex.Lock()
	defer fake.noConfirmMutex.Unlock()
	fake.NoConfirmStub = stub
}

func (fake *FakeLogger) Printf(arg1 string, arg2 ...interface{}) {
	fake.printfMutex.Lock()
	fake.printfArgsForCall = append(fake.printfArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Printf", []interface{}{arg1, arg2})
	fake.printfMutex.Unlock()
	if fake.PrintfStub != nil {
		fake.PrintfStub(arg1, arg2...)
	}
}

func (fake *FakeLogger) PrintfCallCount() int {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	return len(fake.printfArgsForCall)
}

func (fake *FakeLogger) PrintfCalls(stub func(string, ...interface{})) {
	fake.printfMutex.Lock()
	defer fake.printfMutex.Unlock()
	fake.PrintfStub = stub
}

func (fake *FakeLogger) PrintfArgsForCall(i int) (string, []interface{}) {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	argsForCall := fake.printfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLogger) Println(arg1 string) {
	fake.printlnMutex.Lock()
	fake.printlnArgsForCall = append(fake.printlnArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Println", []interface{}{arg1})
	fake.printlnMutex.Unlock()
	if fake.PrintlnStub != nil {
		fake.PrintlnStub(arg1)
	}
}

func (fake *FakeLogger) PrintlnCallCount() int {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	return len(fake.printlnArgsForCall)
}

func (fake *FakeLogger) PrintlnCalls(stub func(string)) {
	fake.printlnMutex.Lock()
	defer fake.printlnMutex.Unlock()
	fake.PrintlnStub = stub
}

func (fake *FakeLogger) PrintlnArgsForCall(i int) string {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	argsForCall := fake.printlnArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogger) PromptWithDetails(arg1 string, arg2 string) bool {
	fake.promptWithDetailsMutex.Lock()
	ret, specificReturn := fake.promptWithDetailsReturnsOnCall[len(fake.promptWithDetailsArgsForCall)]
	fake.promptWithDetailsArgsForCall = append(fake.promptWithDetailsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("PromptWithDetails", []interface{}{arg1, arg2})
	fake.promptWithDetailsMutex.Unlock()
	if fake.PromptWithDetailsStub != nil {
		return fake.PromptWithDetailsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.promptWithDetailsReturns
	return fakeReturns.result1
}

func (fake *FakeLogger) PromptWithDetailsCallCount() int {
	fake.promptWithDetailsMutex.RLock()
	defer fake.promptWithDetailsMutex.RUnlock()
	return len(fake.promptWithDetailsArgsForCall)
}

func (fake *FakeLogger) PromptWithDetailsCalls(stub func(string, string) bool) {
	fake.promptWithDetailsMutex.Lock()
	defer fake.promptWithDetailsMutex.Unlock()
	fake.PromptWithDetailsStub = stub
}

func (fake *FakeLogger) PromptWithDetailsArgsForCall(i int) (string, string) {
	fake.promptWithDetailsMutex.RLock()
	defer fake.promptWithDetailsMutex.RUnlock()
	argsForCall := fake.promptWithDetailsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLogger) PromptWithDetailsReturns(result1 bool) {
	fake.promptWithDetailsMutex.Lock()
	defer fake.promptWithDetailsMutex.Unlock()
	fake.PromptWithDetailsStub = nil
	fake.promptWithDetailsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLogger) PromptWithDetailsReturnsOnCall(i int, result1 bool) {
	fake.promptWithDetailsMutex.Lock()
	defer fake.promptWithDetailsMutex.Unlock()
	fake.PromptWithDetailsStub = nil
	if fake.promptWithDetailsReturnsOnCall == nil {
		fake.promptWithDetailsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.promptWithDetailsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.noConfirmMutex.RLock()
	defer fake.noConfirmMutex.RUnlock()
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	fake.promptWithDetailsMutex.RLock()
	defer fake.promptWithDetailsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
